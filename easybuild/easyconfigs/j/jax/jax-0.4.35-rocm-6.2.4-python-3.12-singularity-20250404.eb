# Developed by Kurt Lust for LUMI
#DOC Contains JAX 0.4.35.dev20250321 with NumPy 2.2.4 and SciPy 1.15.2.
#DOC
#DOC Updated late July 2025 with support for list-packages and python/pip command
#DOC wrapper outside the container for better compatibility with the CSC installations.
easyblock = 'MakeCp'

local_c_jax_version    = '0.4.35' # Actually 0.4.35.dev20250321
local_c_NumPy_version  = '2.2.4'
local_c_SciPy_version  = '1.15.2'
local_c_rocm_version   = '6.2.4'
local_c_python_mm      = '3.12'
local_c_date           = '20250404'
local_c_dockerhash     = 'a5ec205941a2'

local_conda_env = 'jax'
local_c_python_m = local_c_python_mm.split('.')[0]

name =          'jax'
version =       local_c_jax_version
versionsuffix = f'-rocm-{local_c_rocm_version}-python-{local_c_python_mm}-singularity-{local_c_date}'

local_sif =    f'lumi-jax-rocm-{local_c_rocm_version}-python-{local_c_python_mm}-jax-{local_c_jax_version}-dockerhash-{local_c_dockerhash}.sif'
#local_docker = 'lumi-pytorch-rocm-5.6.1-python-3.10-pytorch-v2.1.0.docker'

homepage = 'https://jax.readthedocs.io/en/latest/'

whatis = [
    'Description: JAX is Autograd and XLA, brought together for high-performance numerical computing.',
    'Keywords: JAX'
]

description = f"""
This module provides a container with JAX %(version)s with NumPy {local_c_NumPy_version} and SciPy {local_c_SciPy_version}.

The module defines a number of environment variables:
*   SIF and SIFJAX: The full path and name of the Singularity SIF file 
    to use with singularity exec etc.
*   SINGULARITY_BIND: Mounts the necessary directories from the system,
    including /users, /project, /scratch and /flash so that you should be
    able to use your regular directories in the container.
*   RUNSCRIPTS and RUNSCRIPTSJAX: The directory with some sample
    runscripts.
    
Note that this container uses a Conda environment ({local_conda_env}) internally. When in
the container, the command to activate the container is contained in the
environment variable WITH_CONDA.
"""

docurls = [
    'JAX online docs: https://jax.readthedocs.io/en/latest/'    
]

toolchain = SYSTEM

sources = [
    {
        'filename':    local_sif,
        'extract_cmd': '/bin/cp -L %s .'
    },
]

skipsteps = ['build']

files_to_copy = [
    ([local_sif], '.'),
]

####################################################################################################
#
# Scripts for bin and and/or runscript
#

local_bin_start_shell = """
#!/bin/bash -e

# Run application
if [ -d "/.singularity.d/" ]
then
    # In a singularity container, just in case a user would add this to the path.
    exec bash "$@"
else
    # Not yet in the container

    if [ -z $SIFJAX ] || [ ! -f $SIFJAX ]
    then
        >&2 echo "SIFJAX is undefined or wrong, use this command with the jax module properly loaded!"
        exit
    fi

    singularity exec $SIFJAX bash "$@"
fi

""".replace( '$', '\\$' )

#
# Python wrapper script, also works for several other commands by symlinking.
# Based on code from CSC but adapted for the approach with this module.
#
local_bin_python = """
#!/bin/bash
#
# Python wrapper script, also used for some other commands.
#
# This will start python, or whatever the name of the link to this script is,
# in the JAX container.
#
if [ -z $SIFJAX ] || [ ! -f $SIFJAX ]
then
    >&2 echo "SIFJAX is undefined or wrong, use this command with the PyTorch module properly loaded!"
    exit
fi

REAL_PYTHON="${BASH_SOURCE[0]}"
EXEC_BIN=$(basename "$0")

if [ -d /.singularity.d/ ]; then
    # In a singularity container, just in case a user would add this to the path.
    exec -a $REAL_PYTHON $EXEC_BIN "$@"
else
    # The second variant comes from CSC, might be better if we try to mimic
    # the behaviour of their wrapper, but then we need to set PYTHONPATH
    # as Python doesn't notice it is starting from the virtual environment.
    singularity exec $SIFJAX $EXEC_BIN "$@"
    #singularity exec $SIFJAX bash -c "exec -a $REAL_PYTHON $EXEC_BIN $( test $# -eq 0 || printf " %q" "$@" )"
fi
""".replace( '$', '\\$' )


#
# Script to list packages in a container for compatibility with the CSC approach.
# Goes in bin to be available outside the container and runscript to also be 
# available inside.
#
local_bin_runscript_list_packages = """
#!/bin/bash -e

if [[ -d "/.singularity.d" ]] 
then
    # Running in a singularity container already
    pip3 list
else
    # Not running in a container. We could simply use the pip script,
    # or start in the container which is what we will do.

    if [ -z $SIFJAX ] || [ ! -f $SIFJAX ]
    then
        >&2 echo "SIFJAX is undefined or wrong, use this command with the jax module properly loaded!"
        exit
    fi

    singularity exec $SIFJAX pip3 list
fi

""".replace( '$', '\\$' )


local_runscript_python_simple = """
#!/bin/bash -e

# Run application
python "$@"

""".replace( '$', '\\$' )

####################################################################################################
#
# Installing mostly done in postcmds as we have no EasyBlock to easily work with the container.
#

postinstallcmds = [
    #
    # Commands in bin
    #
    'mkdir -p %(installdir)s/bin',
    f'cat >%(installdir)s/bin/start-shell <<EOF {local_bin_start_shell}EOF',
    'chmod a+x %(installdir)s/bin/start-shell',
    f'cat >%(installdir)s/bin/list-packages <<EOF {local_bin_runscript_list_packages}EOF',
    'chmod a+x %(installdir)s/bin/list-packages',
    # Python wrapper in bin with symbolic links for additional commands
    f'cat >%(installdir)s/bin/python <<EOF {local_bin_python}EOF',
    'chmod a+x %(installdir)s/bin/python',
    f'ln -s ./python %(installdir)s/bin/python{local_c_python_m}',
    f'ln -s ./python %(installdir)s/bin/python{local_c_python_mm}',
    'ln -s  ./python %(installdir)s/bin/pip',
    f'ln -s ./python %(installdir)s/bin/pip{local_c_python_m}',
    #f'ln -s ./python %(installdir)s/bin/pip{local_c_python_mm}', # Does not exist in the jax container.
    #
    # Commands in runscripts
    #
    'mkdir -p %(installdir)s/runscripts',
    f'cat >%(installdir)s/runscripts/list-packages <<EOF {local_bin_runscript_list_packages}EOF',
    'chmod a+x %(installdir)s/runscripts/list-packages',
    f'cat >%(installdir)s/runscripts/conda-python-simple <<EOF {local_runscript_python_simple}EOF',
    'chmod a+x %(installdir)s/runscripts/conda-python-simple',
]

sanity_check_paths = {
    # We deliberately don't check for local_sif as the user is allowed to remove that file
    # but may still want to regenerate the module which would then fail in the sanity check.
    #'files': [f'share/docker-defs/{local_docker}'],
    'files': [],
    'dirs':  ['runscripts'],
}

sanity_check_commands = [
    'singularity exec $SIFJAX python -c "import numpy ; import scipy ; import jax ; print( f'"'JAX {jax.__version__}, NumPy {numpy.__version__}, SciPy {scipy.__version__}.'"' )"',
    # Testing wrapper scripts
    """start-shell -c '/runscripts/conda-python-simple -c "import numpy ; import scipy ; import jax ; print( f'"'JAX {jax.__version__}, NumPy {numpy.__version__}, SciPy {scipy.__version__}.'"' )"' """,
    # Testing the CSC-style wrapper scripts
    'list-packages',
    'pip list',
    f'pip{local_c_python_m}  list',
    'python -c "import numpy ; import scipy ; import jax ; print( f'"'JAX {jax.__version__}, NumPy {numpy.__version__}, SciPy {scipy.__version__}.'"' )"',
    f'python{local_c_python_m} -c "import numpy ; import scipy ; import jax ; print( f'"'JAX {jax.__version__}, NumPy {numpy.__version__}, SciPy {scipy.__version__}.'"' )"',
    f'python{local_c_python_mm} -c "import numpy ; import scipy ; import jax ; print( f'"'JAX {jax.__version__}, NumPy {numpy.__version__}, SciPy {scipy.__version__}.'"' )"',
]

modextravars = {
    # SIF and SIFJAX variables currently set by a function via modluafooter.
    'RUNSCRIPTS':                   '%(installdir)s/runscripts',
    'RUNSCRIPTSJAX':                '%(installdir)s/runscripts',
    'SINGULARITYENV_PREPEND_PATH':  '/runscripts',
    'SINGULARITY_BIND':             '/var/spool/slurmd,/opt/cray,/usr/lib64/libcxi.so.1,' +
                                    '%(installdir)s/runscripts:/runscripts,' + 
                                    '/pfs,/scratch,/projappl,/project,/flash,/appl'
}

modluafooter = f"""
-- Call a routine to set the various environment variables.
create_container_vars( '{local_sif}', '%(name)s', '%(installdir)s' )
"""

moduleclass = 'devel'




